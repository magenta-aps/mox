version: '3'

services:
  mox:
    build:
      context: .
      dockerfile: docker/Dockerfile
    # The `volumes` and `command` mounts the current directory in the docker
    # container and overwrites the CMD from Dockerfile. With this gunicorn
    # reloads on file changes. This is very useful when developing oio_rest.
    volumes:
      - .:/code
      - ./dev-environment/dev-settings.toml:/user-settings.toml
    command: ["gunicorn", "--reload", "-b", "0.0.0.0:8080", "oio_rest:app"]
    ports:
      - "8080:8080"
    env_file:
      - ./dev-environment/db.env
    depends_on:
      - mox-db

  mox-db:
    image: postgres:9.6
    env_file:
      - dev-environment/db.env
    volumes:
      - ./docker/postgres-initdb.d/10-init-db.sh:/docker-entrypoint-initdb.d/10-init-db.sh
      - ./docker/postgres-initdb.d/20-create-extensions.sh:/docker-entrypoint-initdb.d/20-create-extensions.sh
      - ./dev-environment/postgres-initdb.d/30-upgrade-to-superuser.sh:/docker-entrypoint-initdb.d/30-upgrade-to-superuser.sh
      #- postgres-initdb.d:/docker-entrypoint-initdb.d


  # The following service is to copy the scripts needed to initialize the
  # database with user and extentions to a volume. It is not needed when the
  # volume `./docker/postgres-initdb.d/:/docker-entrypoint-initdb.d` is bound in
  # mox-db above.
  mox-cp:
    build:
      context: .
      dockerfile: docker/Dockerfile
    user: root
    entrypoint: []
    command: ["cp", "-r", "/code/docker/postgres-initdb.d/.", "/postgres-initdb.d"]
    volumes:
      - postgres-initdb.d:/postgres-initdb.d

volumes:
  postgres-initdb.d:
