============
Installation
============

All the actively developed source code of mox is a Python package located in
:file:`oio_rest`. You can run it in as you see fit. Two methods are described
below. Use the docker image or a Python package in a virtual environment.

.. tip::

   TL;DR: To get a running development environment with postgres and mox, run:

   .. code-block:: bash

      git clone https://github.com/magenta-aps/mox.git
      cd mox
      docker-compose up -d --build mox
      # run unittests with
      docker-compose exec mox pytest oio_rest

Docker
======

The repository contains a :file:`Dockerfile`. This is the recommended way to
install mox both as a developer and in production.

All releases are pushed to Docker Hub at `magentaaps/mox
<https://hub.docker.com/r/magentaaps/mox>`_ under the ``latest`` tag. The
``dev-latest`` tag contains the latest build from the ``development`` branch.

To run mox in docker you need a running docker. To install docker we refer you
to the `official documentation <https://docs.docker.com/install/>`_.


Database
--------

The container requires a connection to a postgres database. Read :ref:`Database`
for a complete description.

Remember if you set :data:`DB_HOST` to ``localhost`` the container will try to
connect to a database in the same container , not the host machine.

You will need to :ref:`initialize the database, user and
extensions<db_user_ext_init>`. The docker image contains a few scripts to do
this easily. They are designed to work with the `official postgres docker image
<https://hub.docker.com/_/postgres>`_. You can copy the scripts from the docker
image by running:

.. code-block:: bash

   # To a docker volume named postgres-initdb.d
   docker run \
     --rm \
     -v postgres-initdb.d:/postgres-initdb.d \
     --entrypoint="" \
     --user=root \
     magentaaps/mox:latest \
     cp -r /code/docker/postgres-initdb.d/. /postgres-initdb.d

   # To a directory named postgres-initdb.d
   docker run \
     --rm \
     -v $PWD/postgres-initdb.d:/postgres-initdb.d \
     --entrypoint="" \
     --user=root \
     magentaaps/mox:latest \
     cp -r /code/docker/postgres-initdb.d/. /postgres-initdb.d


These scripts can now easily be mounted into the postgres docker image. They
require the environment variables ``DB_NAME``, ``DB_USER`` and ``DB_PASSWORD``
to be set. It is also recommended to set ``POSTGRESS_PASSWORD`` for the
``SUPERUSER`` in postgres. To start a postgres docker image run:

.. code-block:: bash

   docker run \
     -v postgres-initdb.d:/docker-entrypoint-initdb.d \
     -e DB_NAME=mox \
     -e DB_USER=mox \
     -e DB_PASSWORD=mox \
     -e POSTGRES_PASSWORD=mox \
     postgres:9.6

The mox docker image will automatically :ref:`initialize the database
objects<db_object_init>` for on the first startup.


Run the container
-----------------

When you have initialized the database with :ref:`database, user and
extensions<db_user_ext_init>`, you can start a the container with:

.. code-block:: bash

    docker run \
      -p 8080:8080 \
      -e DB_HOST=<IP of DB host> \
      -e DB_USER=mox \
      -e DB_PASSWORD=mox \
      magentaaps/mox:latest

This will pull the image from Docker Hub and start a container in the
foreground. The ``-p 8080:8080`` `binds port
<https://docs.docker.com/engine/reference/commandline/run/#publish-or-expose-port--p---expose>`_
``8080`` of the host machine to port ``8080`` on the container. The ``-e`` `sets
the environment variables
<https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file>`_
in container.

If successful you should see the container initializing database and
finally

.. code-block::

    [2019-04-10 08:22:06 +0000] [1] [INFO] Listening at: http://0.0.0.0:8080 (1)

when the gunicorn server starts up. You should now be able to reach the server
from the host at ``http://localhost:8080``.

For other setting you can set, see :ref:`settings`.

Testing
-------

The dependencies for unittest are included in the docker image. For info on how
to run test see :ref:`Testing` and :ref:`Docker-compose-testing`.


Logs
----
The gunicorn access log is output on ``STDOUT`` and error log is output on
``STDERR``. They can be inspected with ``docker logs``.


File upload
-----------

:file:`/var/mox` is the default :py:data:`FILE_UPLOAD_FOLDER`. It is created as
an anonymous volume. It can be named if needed.

You can also `bind <https://docs.docker.com/storage/bind-mounts/>`_ it, just
make sure the folder on the host system have the owner set to the same
``UID/GID`` as the :ref:`user that runs the application <Docker-user>` in the
:file:`Dockerfile`.


User permissions
----------------
.. _Docker-user:

The :file:`Dockerfile` creates and runs the application as the ``mox`` user.
This user will own all the files generated by the application. This user has a
``UID`` and ``GID`` of 72010.

If you want to use another ``UID/GID``, you can specify it as the
``--user=uid:gid`` `overwrite flag
<https://docs.docker.com/engine/reference/run/#user>`_ for the ``docker run``
command or `in docker-compose
<https://docs.docker.com/compose/compose-file/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir>`_.
If you change the ``UID/GID``, the :file:`/var/mox` volume may not have the
right permissions. It is recommended to only use `bind
<https://docs.docker.com/storage/bind-mounts/>`_ if you overwrite the user and
set the same user as owner of the directory you bind.



Docker-compose
==============

You can use ``docker-compose`` to start up mox and postgres.

A :file:`docker-compose.yml` for development is included. It automatically
starts up `postgres <https://hub.docker.com/_/postgres>`_. It sets the
environment variables to connect them.

It also mounts the current directory in the container and automatically restarts
the server on changes. This enables you to edit the files in :file:`oio_rest`
and the server will be reloaded automatically.

To pull the images and start the three service run:

.. code-block:: bash

    docker-compose up -d --build mox

The ``-d`` flag move the services to the background. You can inspect the output
of them with ``docker-compose logs <name>`` where ``<name>`` is the name of the
service in :file:`docker-compose.yml`. The ``--build`` flag builds the newest
docker image for ``oio_rest`` from the local :file:`Dockerfile`.

To stop the service again run ``docker-compose stop``. This will stop the
services, but the data will persist. To completely remove the containers and
data run ``docker-compose down -v``.

The :file:`docker-compose.yml` file contains a service named ``mox-cp``. Its
purpose is to copy the files needed to :ref:`initialize the database, user and
extensions<db_user_ext_init>` to a volume. This volume can then be mounted to
the postgres image to automatically initialize the database. This functionality
is not needed by default because the needed files are mounted directly from the
host. It is included as an example when you want to use an environment closer to
production.

.. _Docker-compose-testing:

Testing in docker-compose
-------------------------
The docker-compose development environment is ready run unittests on. To run all
unittest use:

.. code-block:: bash

   docker-compose exec mox pytest oio_rest

It contains all the required testing dependencies and permissions described in
:ref:`Testing`. pgTAP is installed in the database via the
:file:`dev-environment/postgres.Dockerfile` and the required database user
privilegedes are granted via
:file:`dev-environment/postgres-initdb.d/30-upgrade-to-superuser.sh`


From source
===========

All the relevant code is in a Python package located in :file:`oio_rest`.

Prerequisites
-------------

.. ATTENTION DEVELOPER: When you change these prerequisites, make sure to also
   update them in Dockerfile.

The :file:`oio_rest` package requires a few system dependencies. It requires:

* ``python`` >=3.5
* ``pip`` >=10.0.0
* ``setuptools`` >=39.0.1
* ``wheel``
* ``git`` for installing some requirements from :file:`requirements.txt` and
* ``libxmlsec1-dev`` for the Python package ``xmlsec``.

Mox needs to connect to ``postgres9.6``. mox can be configured with
:py:data:`DB_HOST` to connect to any machine. You can install ``postgres9.6`` on
the same machine and leave :py:data:`DB_HOST` as the default value of
``localhost``.

Installation
------------

When the prerequisites are met, you can install mox from a clone of the git
repository.

.. code-block:: bash

   git clone https://github.com/magenta-aps/mox.git
   cd mox/oio_rest
   pip install .

Configuration
-------------

Look through the :ref:`settings` and configure the one you need either as
environment variables or as a config file. The most likely changes are properly
to :py:data:`DB_HOST`, :py:data:`DB_USER` and :py:data:`DB_PASSWORD`.

Database initialization
-----------------------

.. todo::

   Refer to relavant section in :ref:`database` when it is written in `#30317
   <https://redmine.magenta-aps.dk/issues/30317>`_.


Run
---

When the database is initialized you can access the cli with ``python3 -m
oio_rest <command>``. To run the development server run ``python3 -m oio_rest
run``. Alternatively, use gunicorn to run a server with ``gunicorn
oio_rest.app:app``.
